version: '3.8'

services:
  #database section
  
  #orderdb: sql server
  orderdb:
    container_name: orderdb
    environment:
      SA_PASSWORD: "Passw0rd!"
      ACCEPT_EULA: "Y"
    restart: always
    volumes:
      - sqlserver_data:/var/lib/sqlserver/data
    ports:
      - "1435:1433"
        
  #productdb: mysql
  productdb:
    container_name: productdb
    environment:
      MYSQL_ROOT_PASSWORD: "Passw0rd!"
      MYSQL_DATABASE: ProductDb
    restart: always
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      interval: 10s
      retries: 5
      start_period: 30s
  
  #customerdb: postgres
  customerdb:
    container_name: customerdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=CustomerDb
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d CustomerDb"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  #basketdb: redis
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  
  #inventorydb: mongo
  inventorydb:
    container_name: inventorydb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
  
  #infrastructure section
  rabbitmq:
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    
  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=thanhlanhlit@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=Lanh010702
    restart: always
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
    
  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
  
  elasticsearch:
    container_name: elasticsearch
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
  
  kibana:
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"

  #microservices api sections
  product.api:
    container_name: product.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnection=Server=productdb;Port=3306;Database=ProductDB;Uid=root;Pwd=Passw0rd!;"
    depends_on: 
      productdb:
        condition: service_healthy
    ports:
      - "6002:80"
    restart: always
    networks:
      - default
  
  customer.api:
    container_name: customer.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "ConnectionStrings:DefaultConnection=Server=customerdb;Port=5432;Database=CustomerDb;User Id=admin;Password=admin1234;"
    depends_on: 
      customerdb:
        condition: service_healthy
    ports:
      - "6003:80"
    restart: always
    networks:
      - default  

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - "CacheSettings:ConnectionString=basketdb:6379"
    depends_on: 
      basketdb:
        condition: service_healthy
    ports:
      - "6004:80"
    restart: always
    networks:
      - default  