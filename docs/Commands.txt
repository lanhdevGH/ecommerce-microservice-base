Các command hay dùng:

- docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d --remove-orphans --build

- docker-compose -f docker-compose.yml -f docker-compose.override.yml down
=========================================================================================================
VOLUME
	- Docker volume là một phần của Docker dùng để lưu trữ dữ liệu bên ngoài container. 
	- Volume giúp bạn giữ lại dữ liệu ngay cả khi container bị xóa hoặc tái tạo.
	- Volume được quản lý bởi Docker và có thể được chia sẻ giữa nhiều container.
	- Volume thường được sử dụng để lưu trữ dữ liệu như cơ sở dữ liệu, tệp tin cấu hình, hoặc bất kỳ dữ liệu nào cần được bảo tồn.
	------------------------------------------
Để kiểm tra tất cả các volume trong Docker, bạn dùng lệnh sau:
	Lệnh này sẽ hiển thị danh sách tất cả các volume hiện có trên hệ thống Docker của bạn.
		- docker volume ls
	Xem chi tiết một volume cụ thể:
		- docker volume inspect <volume_name>
		Thông tin trả về sẽ bao gồm:
			- Mountpoint (đường dẫn thực trên máy)
			- Labels
			- Scope
			- Container nào đang dùng volume đó (nếu có)
	Xem container nào đang sử dụng volume
		- docker ps -a --filter volume=<volume_name>
		- docker ps -a --filter volume=<volume_id>
	Xóa một volume:
		- docker volume rm <volume_name>
	Xóa tất cả volume không còn được sử dụng (dangling volumes):
		- docker volume prune

=========================================================================================================
NETWORK
	- Docker network là một phần của Docker giúp bạn quản lý cách mà các container giao tiếp với nhau và với thế giới bên ngoài.
	- Mỗi container trong Docker có thể được kết nối với một hoặc nhiều mạng, cho phép chúng giao tiếp với nhau thông qua các địa chỉ IP hoặc tên miền.
	- Docker cung cấp một số loại mạng khác nhau như bridge, host, overlay, và macvlan để phục vụ cho các nhu cầu khác nhau.
	------------------------------------------

	1. Để kiểm tra tất cả các network trong Docker, bạn dùng lệnh sau:
		Lệnh này sẽ hiển thị danh sách tất cả các network hiện có trên hệ thống Docker của bạn.
			- docker network ls
	2. Xem chi tiết một network cụ thể:
			- docker network inspect <network_name>
			Thông tin trả về sẽ bao gồm:
				- Driver (loại network)
				- IPAM (IP Address Management)
				- Containers (các container đang kết nối với network đó)
	3. Xem container nào đang kết nối đến network nào:
		- docker network inspect <network_name> | grep Name
	4. Xóa các network không sử dụng:
		- docker network prune

networks:
  default:
    name: tedu_microservices
    driver: bridge

	Dưới đây là lý do tại sao các service vẫn có thể "join" mạng:

Mạng mặc định: Khi không chỉ định mạng cho từng service, 
Docker Compose sẽ tự động sử dụng mạng mặc định được cấu hình trong phần networks. 
Trong file của bạn, mạng này có tên là tedu_microservices và sử dụng driver bridge.

Tính năng của Docker Compose: Docker Compose sẽ tự động kết nối tất cả các service 
trong file Docker Compose với nhau trên cùng một mạng nếu không có mạng riêng biệt được 
chỉ định. 
Điều này giúp các service có thể giao tiếp với nhau thông qua tên service mà không cần 
cấu hình thêm.

=========================================================================================================

DATABASE
	Migrate database:
		- dotnet ef migrations add "Init_ProductDB"
		- dotnet ef database update

		- dotnet watch run --environment "Development"
		- dotnet restore
		- dotnet build
		- Migration commands for Ordering API:
		  - install-package Microsoft.EntityFrameworkCore.Tools -Project Ordering.Infrastructure
		  - Add-Migration SampleMigration -Project Ordering.Infrastructure -StartupProject Ordering.API -OutputDir Persistence/Migrations
		  - Remove-Migration -Project Ordering.Infrastructure -StartupProject Ordering.API
		  - Update-Database -Project Ordering.Infrastructure -StartupProject Ordering.API

	Kiểm tra quyền user trong mysql:
		SELECT user,authentication_string,plugin,host FROM mysql.user;

		CREATE USER IF NOT EXISTS 'root'@'172.18.0.1' IDENTIFIED BY 'Passw0rd!';
		GRANT ALL PRIVILEGES ON *.* TO 'root'@'172.18.0.1' WITH GRANT OPTION;
		FLUSH PRIVILEGES;

=========================================================================================================

Add-Migration InitialDB -Project Customer.API -OutputDir Migrations

=========================================================================================================

Check healthy service

	healthcheck:
	  test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
	  interval: 10s
	  timeout: 5s
	  retries: 5
	  start_period: 5s

		test: ["CMD", "redis-cli", "ping"]: kiểm tra Redis có phản hồi "PONG" hay không.

		interval: 10s: khoảng thời gian giữa các lần kiểm tra.

		timeout: 5s: thời gian tối đa chờ mỗi lần kiểm tra.

		retries: 5: số lần thử lại trước khi coi là unhealthy.

		start_period: 5s: thời gian chờ trước khi bắt đầu kiểm tra sức khỏe.

GIT: 
	- Lệnh xóa các file đã tracked trong Git:
		git ls-files | grep '.*/appsettings\..*\.json$' | xargs git rm --cached

